#!/usr/bin/env python3

## \@Author         ltabis
## \@date           31/03/2020
## \@description    A script that generates a game from sources given.

import os
import sys
import subprocess
import configparser
from shutil import copy

DEFAULT_CONFIG_PATH = "/etc/ecl"

## Enable colors for windows.
if sys.platform.lower() == "win32":
    os.system('color')

## Colors class.
class style():
    RESET     = lambda x: '\033[0m'  + str(x)
    BLACK     = lambda x: '\033[30m' + str(x) + '\033[0m'
    RED       = lambda x: '\033[31m' + str(x) + '\033[0m'
    GREEN     = lambda x: '\033[32m' + str(x) + '\033[0m'
    YELLOW    = lambda x: '\033[33m' + str(x) + '\033[0m'
    BLUE      = lambda x: '\033[34m' + str(x) + '\033[0m'
    MAGENTA   = lambda x: '\033[35m' + str(x) + '\033[0m'
    CYAN      = lambda x: '\033[36m' + str(x) + '\033[0m'
    WHITE     = lambda x: '\033[37m' + str(x) + '\033[0m'
    UNDERLINE = lambda x: '\033[4m'  + str(x) + '\033[0m'

## Crearing a config parser object.
config = configparser.ConfigParser()

default_config = "[config]\n"

def try_int(str):
    try:
        int(str)
        return True
    except:
        return False

## Shell class.
class Shell:

    ## init class
    def __init__(self):

        ## Shell commands.
        self.__commands = {
            "quit"          : (self.quit, "Exits the program."),
            "exit"          : (self.quit, "^"),
            "sources"       : (self.display_sources, "Display all sources from the current project."),
            "add"           : (self.add_source, "Add sources to the current profile"),
            "help"          : (self.help, "Display this help"),
            "compile"       : (self.compile_engine, "Re-compile the engine to a static library."),
            "new"           : (self.new_project, "Create a new project."),
            "projects"      : (self.show_projects, "Show all available projects."),
            "pj"            : (self.show_projects, "^"),
            "select"        : (self.select_project, "Select a project."),
            "delete"        : (self.delete_project, "Delete a project."),
            "del"           : (self.delete_project, "^"),
            "remove"        : (self.delete_source, "Delete a sources from the current project (remove [[index_of_source] | [first_source last_source]])"),
            "rm"            : (self.delete_source, "^"),
        }

        ## Projects available.
        self.__projects     = {
        }

        ## Currently selected project.
        self.__selected     = None

    def try_command(self, cmd):

        ## Checking empty list.
        if not cmd:
            return

        ## Lower all args.
        cmd = [arg.lower() for arg in cmd]

        ## Trying to exectute the command.
        if cmd[0] in self.__commands.keys():
            self.__commands[cmd[0]][0](cmd[1:])
        else:
            print(style.YELLOW("The '" + cmd[0] + "' command doesn't exists."))

    ## Quitting the program.
    def quit(self, cmd):
        sys.exit(0)

    ## TODO : needs to check if the path is correct.
    ## Add a source path to the list.
    def add_source(self, cmd):

        if len(cmd) < 1:
            return

        if not self.__selected:
            print(style.RED("No projects were selected."))
            return

        for arg in cmd:
            self.__projects[self.__selected].append(arg)
            print(f"{style.BLUE('Source')} {style.GREEN(arg)} {style.BLUE('added to the')} {style.BLUE(self.__selected)} {style.BLUE('project.')}")

    ## Display saved sources paths.
    def display_sources(self, cmd):

        if not self.__selected:
            print(style.RED("No projects were selected."))
            return

        if not self.__projects[self.__selected]:
            print(style.RED("No sources where found for the " + self.__selected + " project."))
            return

        print(f"{style.BLUE('Sources for the ')}{style.GREEN(self.__selected)}{style.BLUE(' project =>')}")

        for source in self.__projects[self.__selected]: 
            print("   - " + source)

    ## Deletes ressources passed as parameter.
    def delete_source(self, cmd):

        if len(cmd) < 1:
            print(style.RED("No source to delete found."))
            return

        if try_int(cmd[0]) == False or (len(cmd) >= 2 and try_int(cmd[1]) == False):
            print(style.RED("Please give a valid source number."))
            return

        if int(cmd[0]) <= 0 or (len(cmd) >= 2 and int(cmd[1]) <= 0):
            print(style.RED("Source number can't be negative."))
            return

        bound_x = int(cmd[0]) - 1
        bound_y = bound_x

        if len(cmd) >= 2:
            bound_y = int(cmd[1]) - 1

        ## Deleting sources
        while bound_x <= bound_y:

            if len(self.__projects[self.__selected]) <= bound_x:
                bound_y -= 1
                continue

            print(f"{style.GREEN(self.__projects[self.__selected][bound_x])} {style.BLUE('has been deleted.')}")
            del self.__projects[self.__selected][bound_x]
            bound_y -= 1


    ## Create a new compilation project.
    def new_project(self, cmd):

        if len(cmd) < 1:
            print(style.RED("No name given for a new project."))
            return

        self.__projects[cmd[0]] = []
        self.__selected = cmd[0]
        print(f"{style.BLUE('Project')} {style.GREEN(cmd[0])} {style.BLUE('added.')}")

    ## Selects an existing project.
    def select_project(self, cmd):

        if len(cmd) < 1:
            print(style.RED("No project to select given."))
            return

        if cmd[0] in self.__projects.keys():
            self.__selected = cmd[0]
            print(f"{style.GREEN(cmd[0])} {style.BLUE('project selected.')}")
        else:
            print(style.YELLOW("The " + cmd[0] + " project doesn't exists."))

    ## Show all projects
    def show_projects(self, cmd):

        if not self.__projects:
            print(style.RED("No projects found."))
            return

        print(style.BLUE(str(len(self.__projects)) + (" projects" if len(self.__projects) > 1 else " project") + " found."))
        for project in self.__projects:
            print(("$ " if project == self.__selected else "") + style.GREEN(project))

    ## Deletes a project from the project list
    def delete_project(self, cmd):

        if len(cmd) < 1:
            print(style.RED("No project to delete specified."))
            return

        if cmd[0] in self.__projects.keys():
            self.__selected = None
            del self.__projects[cmd[0]]
            print(f"{style.GREEN(cmd[0])} {style.BLUE('project deleted.')}")
        else:
            print(style.YELLOW("The '" + cmd[0] + "' project doesn't exists."))

    ## Compile the engine into a static library.
    def compile_engine(self, cmd):
        if not os.path.isdir("build"):
            execute_command(["mkdir", "build"])
        execute_command(["conan", "install", "-if", "build", ".", "--build=missing"])
        execute_command(["cmake", "-B", "build", "."])
        execute_command(["make", "-C", "build"])

    ## TODO : Add a description to each commands.
    ## Display help message.
    def help(self, cmd):

        padding = max(map(len, self.__commands.keys()))

        print(style.BLUE("Available commands:"))
        for (command, (fun, description)) in zip(self.__commands, self.__commands.values()):
            print(command, end="")
            print((padding - len(command)) * " ", end="")
            print(" => " + style.GREEN(description))

    ## TODO : Add a 'build' project command.
    ## TODO : Add a include paths command.

# Execute a command.
def execute_command(commandline):

    # Executing command.
    process = subprocess.Popen(commandline, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # Run while the command didn't end.
    while True:
        
        # Reading return code.
        output = process.stderr.readline()

        if len(output):
            print(f"error: {output.strip()}")

        returncode = process.poll()

        # Process has finished        
        if returncode is not None:
            if returncode:
                print(f"return code: {returncode}")
            for output in process.stdout.readlines():
                print(f"output: {output.strip()}")
            break

## Create a configuration .ini file to store static data.
def create_config_file(projects_path):

    config.add_section('install')
    config.set('install', 'projects', 'projects_path')

    # with open('config.ini', 'w') as f:
    #     config.write(f)

## Setting up all configurations needed for the engine and project.
def setup_engine():

    print(style.BLUE("No project setup have been found. Setting up the engine ..."))

    ## Creating the project folder.
    while True:
        projects_path = input(style.BLUE("Please specify where your projects will be saved: "))
        os.makedirs(projects_path)
        break

    ## Adding EclataxEngine binary to list of binaries.
    while True:
        user_install = input(style.BLUE("Would you like to install the EclataxEngine project manager for the current user ? (y/n)"))

        ## Copying the EclataxEngine executable to /usr/bin. 
        ## TODO : Windows implementation.
        if user_install.tolower() == "y":
            copy("./EclataxEngine", "/usr/bin/")
            break
        elif user_install.tolower() == "n":
            break

    create_config_file(projects_path)

def main():

    shell = Shell()

    ## Creating a new project folder
    if len(sys.argv) == 2 and (sys.argv[1] == "-i" or sys.argv[1] == "--install"):
        setup_engine()

    ## Running the shell
    while True:

        ## Getting user input
        cmd = input("$> ")
        cmd = cmd.split()
        shell.try_command(cmd)

if __name__ == "__main__":
    main()

## TODO : Uninstall option.
## TODO : Change project path install.