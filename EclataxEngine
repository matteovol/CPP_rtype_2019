#!/usr/bin/env python3

## \@Author         ltabis
## \@date           31/03/2020
## \@description    A project manager for the EclataxEngine.

import os
import sys
import subprocess
import configparser
from shutil import copy

DEFAULT_CONFIG_PATH = "/etc/ecl/"

## Enable colors for windows.
if sys.platform.lower() == "win32":
    os.system('color')

## Colors class.
class style():
    RESET     = lambda x: '\033[0m'  + str(x)
    BLACK     = lambda x: '\033[30m' + str(x) + '\033[0m'
    RED       = lambda x: '\033[31m' + str(x) + '\033[0m'
    GREEN     = lambda x: '\033[32m' + str(x) + '\033[0m'
    YELLOW    = lambda x: '\033[33m' + str(x) + '\033[0m'
    BLUE      = lambda x: '\033[34m' + str(x) + '\033[0m'
    MAGENTA   = lambda x: '\033[35m' + str(x) + '\033[0m'
    CYAN      = lambda x: '\033[36m' + str(x) + '\033[0m'
    WHITE     = lambda x: '\033[37m' + str(x) + '\033[0m'
    UNDERLINE = lambda x: '\033[4m'  + str(x) + '\033[0m'

## Crearing a config parser object.
config = configparser.ConfigParser()

def try_int(str):
    try:
        int(str)
        return True
    except:
        return False

## Shell class.
class Shell:

    ## init class
    def __init__(self, projects_path):

        ## Shell commands.
        self.__commands = {
            "quit"          : (self.quit, "Exits the program."),
            "exit"          : (self.quit, ""),
            "sources"       : (self.display_sources, "Display all sources from the current project."),
            "add"           : (self.add_source, "Add sources to the current profile"),
            "help"          : (self.help, "Display this help"),
            "compile"       : (self.compile_engine, "Re-compile the engine to a static library."),
            "new"           : (self.new_project, "Create a new project."),
            "projects"      : (self.show_projects, "Show all available projects."),
            "pj"            : (self.show_projects, ""),
            "select"        : (self.select_project, "Select a project."),
            "delete"        : (self.delete_project, "Delete a project."),
            "del"           : (self.delete_project, ""),
            "remove"        : (self.delete_source, "Delete a sources from the current project (remove [[index_of_source] | [first_source last_source]])"),
            "rm"            : (self.delete_source, ""),
        }

        self.__projects_path = projects_path

        ## Projects available.
        self.__projects = {
        }

        ## Currently selected project.
        self.__selected = None

        ## Project configuration reader
        self.__projectsconfig = configparser.ConfigParser()

        try:

            ## Initializing projects config files.
            for projectfile in os.listdir(projects_path):
                tmp = configparser.ConfigParser()
                tmp.read(f"{projects_path}/{projectfile}")
                self.__projects[tmp["config"]["name"]] = tmp

        except:
            print(style.RED(f"Project folder couldn't be found at {projects_path}. Please retry with the --install option."))
            sys.exit(1)

    def try_command(self, cmd):

        ## Checking empty list.
        if not cmd:
            return

        ## Lower all args.
        cmd = [arg.lower() for arg in cmd]

        ## Trying to exectute the command.
        if cmd[0] in self.__commands.keys():
            self.__commands[cmd[0]][0](cmd[1:])
        else:
            print(style.YELLOW(f"The '{cmd[0]}' command doesn't exists."))

    ## Quitting the program.
    def quit(self, cmd):
        sys.exit(0)

    ## Save the current selected config.
    def save_work(self):

        tmp = self.__projects[self.__selected]
        
        with open(f"{self.__projects_path}/{tmp['config']['name']}.ini", 'w') as f:
            tmp.write(f)

    ## TODO : needs to check if the path is correct.
    ## TODO : replace first if expression with placeholders.
    ## Add a source path to the list.
    def add_source(self, cmd):

        if len(cmd) < 1:
            return

        if not self.__selected:
            print(style.RED("No projects were selected."))
            return

        numeber_of_sources = len(self.__projects[self.__selected]["sources"]) + 1

        for arg in cmd:
            self.__projects[self.__selected].set('sources', str(numeber_of_sources), arg)
            numeber_of_sources += 1
            print(f"{style.BLUE('Source')} {style.GREEN(arg)} {style.BLUE('added to the')} {style.BLUE(self.__selected)} {style.BLUE('project.')}")

        self.save_work()

    ## Display saved sources paths.
    def display_sources(self, cmd):

        if not self.__selected:
            print(style.RED("No projects were selected."))
            return

        if not self.__projects[self.__selected]["sources"]:
            print(style.RED(f"No sources where found for the {self.__selected} project."))
            return

        print(f"{style.BLUE('Sources for the ')}{style.GREEN(self.__selected)}{style.BLUE(' project =>')}")

        for (index, path) in dict(self.__projects[self.__selected].items("sources")).items():
            print(f"   - {index}: {path}")

    ## Deletes ressources passed as parameter.
    def delete_source(self, cmd):

        if len(cmd) < 1:
            print(style.RED("No source to delete found."))
            return

        if try_int(cmd[0]) == False or (len(cmd) >= 2 and try_int(cmd[1]) == False):
            print(style.RED("Please give a valid source number."))
            return

        if int(cmd[0]) <= 0 or (len(cmd) >= 2 and int(cmd[1]) <= 0):
            print(style.RED("Source number can't be negative."))
            return

        bound_x = int(cmd[0])
        bound_y = bound_x

        if len(cmd) >= 2:
            bound_y = int(cmd[1])

        ## Deleting sources
        for (source_index, source_name) in self.__projects[self.__selected]["sources"].items():

            if int(source_index) >= bound_x and int(source_index) <= bound_y:
                self.__projects[self.__selected].remove_option('sources', source_index)
                print(f"{style.GREEN(source_name)} {style.BLUE('has been deleted.')}")

        self.save_work()


    ## Create a new compilation project.
    def new_project(self, cmd):

        if len(cmd) < 1:
            print(style.RED("No name given for a new project."))
            return

        self.__projects[cmd[0]] = configparser.ConfigParser()
        self.__projects[cmd[0]].add_section('config')
        self.__projects[cmd[0]].add_section('sources')
        self.__projects[cmd[0]].set('config', 'name', cmd[0])

        self.__selected = cmd[0]
        print(f"{style.BLUE('Project')} {style.GREEN(cmd[0])} {style.BLUE('added.')}")

        open(f"{self.__projects_path}/{cmd[0]}.ini", 'a').close()
        self.save_work()

    ## Selects an existing project.
    def select_project(self, cmd):

        if len(cmd) < 1:
            print(style.RED("No project to select given."))
            return

        if cmd[0] in self.__projects.keys():
            self.__selected = cmd[0]
            print(f"{style.GREEN(cmd[0])} {style.BLUE('project selected.')}")
        else:
            print(style.YELLOW(f"The {cmd[0]} project doesn't exists."))

    ## Show all projects
    def show_projects(self, cmd):

        if not self.__projects:
            print(style.RED("No projects found."))
            return

        print(f"{style.BLUE(str(len(self.__projects)))} {'projects' if len(self.__projects) > 1 else 'project'} found.")
        for project in self.__projects:
            print(f"{'$ ' if project == self.__selected else ''}{style.GREEN(project)}")

    ## Deletes a project from the project list
    def delete_project(self, cmd):

        if len(cmd) < 1:
            print(style.RED("No project to delete specified."))
            return

        if cmd[0] in self.__projects.keys():
            self.__selected = None
            del self.__projects[cmd[0]]
            os.remove(f"{self.__projects_path}/{cmd[0]}.ini")
            print(f"{style.GREEN(cmd[0])} {style.BLUE('project deleted.')}")
        else:
            print(style.YELLOW(f"The '{cmd[0]}' project doesn't exists."))

    ## Compile the engine into a static library.
    def compile_engine(self, cmd):
        if not os.path.isdir("build"):
            execute_command(["mkdir", "build"])
        execute_command(["conan", "install", "-if", "build", ".", "--build=missing"])
        execute_command(["cmake", "-B", "build", "."])
        execute_command(["make", "-C", "build"])

    ## Display help message.
    def help(self, cmd):

        padding = max(map(len, self.__commands.keys()))

        print(style.BLUE("Available commands:"))
        last_command = self.__commands.values()
        for (command, (fun, description)) in zip(self.__commands, self.__commands.values()):
            if last_command != fun:
                print("")
            print(style.MAGENTA(command), end="")
            print((padding - len(command)) * " ", end="")
            if last_command != fun:
                print(f" => {style.GREEN(description)}")
            else:
                print(" |")
            last_command = fun

    ## TODO : Add a 'build' project command.
    ## TODO : Add a include paths command.

# Execute a command.
def execute_command(commandline):

    # Executing command.
    process = subprocess.Popen(commandline, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # Run while the command didn't end.
    while True:
        
        # Reading return code.
        output = process.stderr.readline()

        if len(output):
            print(f"error: {output.strip()}")

        returncode = process.poll()

        # Process has finished        
        if returncode is not None:
            if returncode:
                print(f"return code: {returncode}")
            for output in process.stdout.readlines():
                print(f"output: {output.strip()}")
            break

## Create a folder at the specified path.
def create_folder(path):

    if not os.path.isdir(path):
        os.makedirs(path)

## Create a configuration .ini file to store static data.
def create_config_file(projects_path):

    config.add_section('install')
    config.set('install', 'projects', projects_path + "/projects")

    create_folder(DEFAULT_CONFIG_PATH)

    with open(DEFAULT_CONFIG_PATH + 'eclconfig.ini', 'w') as f:
        config.write(f)

## Setting up all configurations needed for the engine and project.
def setup_engine():

    print(style.BLUE("No project setup have been found. Setting up the engine ..."))

    ## Creating the project folder.
    while True:
        projects_path = input(style.BLUE("Please specify where your projects will be saved: "))
        create_folder(projects_path + "/projects")
        break

    ## Adding EclataxEngine binary to list of binaries.
    while True:
        user_install = input(style.BLUE("Would you like to install the EclataxEngine project manager for the current user ? (y/n)"))

        ## Copying the EclataxEngine executable to /usr/bin. 
        ## TODO : Windows implementation.
        if user_install.lower() == "y":
            copy("./EclataxEngine", "/usr/bin/")
            break
        elif user_install.lower() == "n":
            break

    create_config_file(projects_path)

## Display an help message.
def display_help():
    print("usage: EclataxEngine [-h | --help] [-i | --install]\n\n"\
          "help    : Display this help message.\n"\
          "install : Install and setup the engine.")
    sys.exit(0)

## Checks if the engine as been installed.
def check_setup():

    while not os.path.exists(DEFAULT_CONFIG_PATH + 'eclconfig.ini'):
        res = input(style.YELLOW("The engine hasn't been setup yet.\nWould you like to do it now ? (y/n) "))
        if res.lower() == "y":
            setup_engine()
            break
        elif res.lower() == "n":
            sys.exit(0)

def main():

    ## Creating a new project folder or display help.
    if len(sys.argv) == 2:
        if sys.argv[1] == "-h" or sys.argv[1] == "--help":
            display_help()
        elif sys.argv[1] == "-i" or sys.argv[1] == "--install":
            setup_engine()

    check_setup()

    config.read(DEFAULT_CONFIG_PATH + 'eclconfig.ini')

    shell = Shell(config["install"]["projects"])

    ## Running the shell
    while True:

        ## Getting user input
        cmd = input("$> ")
        cmd = cmd.split()
        shell.try_command(cmd)

if __name__ == "__main__":
    main()

## TODO : Uninstall option. -u --uninstall
## TODO : Change project path install.
## TODO : Replace all string formatings with f""